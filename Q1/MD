

**数学建模项目 Markdown 文档编写规范 (版本 1.0)**

**1. 目的与原则 (Purpose & Principles):**

* **目的:** 确保项目文档（包括代码说明、分析流程、模型解释、结果呈现等）的清晰性、准确性、一致性、可读性和可追溯性，方便团队内部沟通、促进项目理解、支撑最终论文撰写。
* **原则:** 文档应与代码和分析**同步**更新，内容**准确**反映实际操作，表述**简洁明了**，结构**清晰规范**。

**2. 文档范围 (Scope):**

建议为以下内容创建或生成对应的 Markdown 文档/片段：

* **主要 Python 脚本:** 每个承担独立功能（如数据加载、特征工程、模型训练、可视化）的 `.py` 脚本，应有对应的 Markdown 说明。
* **关键分析步骤:** 对于项目中的重要分析环节（例如，特定特征的探索性分析、模型选择的论证、特定结果的深入解读），应用 Markdown 进行记录和阐述。
* **模型详情:** 每个构建的核心模型，应有文档说明其类型、参数选择、训练过程、评估结果和局限性。
* **核心结果:** 对重要的图表、表格和关键发现，应配有 Markdown 文字解释。

**3. 结构与格式 (Structure & Format):**

* **文件组织:**
    * **推荐方式:** 对于每个主要的 Python 脚本（如 `P1_V1.11_...py`），建议在脚本的注释中包含核心信息，并可以考虑在需要详细阐述时，生成/编写一个同名的 `.md` 文件（如 `P1_V1.11_...md`）或将其整合到按问题或分析阶段组织的更大的 Markdown 文件中（如 `Problem1_Analysis.md`）。对于 Jupyter Notebook 用户，可以直接在 Notebook 的 Markdown 单元格中编写。
    * **灵活性:** 团队可根据项目复杂度和偏好选择最合适的组织方式，关键在于**一致性**和**易于查找**。
* **文档内部结构 (推荐模板):**
    * 使用 Markdown 标题 (`#`, `##`, `###`) 定义层级。
    * 对于描述一个代码块或分析步骤的文档片段，建议包含：
        ```markdown
        ### [步骤编号/名称] (版本 [版本号])

        **1. 目的 (Purpose):**
        (简述本步骤要实现的目标或解决的问题。)

        **2. 方法/逻辑 (Methodology/Logic):**
        (解释采用的关键算法、技术、处理流程或计算逻辑。)

        **3. 输入 (Input):**
        (列出本步骤依赖的主要数据、变量或文件，并简要说明。)
        * `变量名/文件名` (类型): 描述

        **4. 输出 (Output):**
        (描述本步骤产生的主要结果、变量、文件或图表。)
        * 控制台输出: [描述关键信息]
        * 生成文件: `[文件名]` ([文件内容简述])
        * 更新/生成变量: `[变量名]` ([变量含义])

        **5. (可选) 关键代码解释:**
        (如果某段代码逻辑复杂或重要，可在此处引用并解释。)
        ```python
        # 示例代码片段
        result = complex_function(input_data)
        ```
        (对上述代码的中文解释。)

        **6. (可选) 结果分析/说明:**
        (对本步骤产生的结果进行初步解读或说明其意义。)

        **7. 版本信息:**
        (明确指出本文档描述的代码/分析对应的版本号。)
        ```
* **标题层级:** 一级标题 (`#`) 用于文档主标题；二级标题 (`##`) 用于主要部分（如 问题1、问题2）；三级标题 (`###`) 用于具体步骤或子部分；四级及以后 (`####`...) 用于更细分的点。

**4. 内容要求 (Content Requirements):**

* **准确性:** 文档内容必须准确反映对应的代码实现和分析结果。
* **完整性:** 关键信息（如目的、方法、输入、输出、版本）不应遗漏。
* **简洁性:** 避免冗长、无关的描述，直击要点。
* **可理解性:** 使用清晰的语言，对专业术语或缩写进行必要的解释。

**5. 版本控制 (Versioning):**

* **文档版本与代码版本关联:** 每个 Markdown 文档（或文档片段）**必须**在标题或开头显著位置标明其对应的**版本号**（与相关代码版本一致）。
* **更新同步:** 当代码进行重要更新并产生新版本时，对应的 Markdown 文档**必须**同步更新，并更新版本号。在文档中可简要说明相比上一版本的主要变更。

**6. 代码关联与展示 (Code Association):**

* 使用 Markdown 的**代码块语法** (三个反引号 ```python ... ```) 来嵌入或引用关键的 Python 代码片段。
* 在解释代码逻辑时，清晰说明该解释对应哪部分代码。

**7. 格式与风格 (Style & Tone):**

* **语言:** 推荐使用**中文**作为主要的文档编写语言。
* **风格:** 保持**客观、专业、严谨**的写作风格。
* **Markdown 语法:**
    * **列表:** 使用有序列表 (`1.`, `2.`) 或无序列表 (`*`, `-`, `+`) 清晰组织信息点。
    * **强调:** 使用粗体 (`**文字**`) 或斜体 (`*文字*`) 强调关键词或概念。
    * **链接:** 合理使用链接 (`[显示文本](URL)`) 指向参考资料或项目其他部分。
    * **表格:** 对于结构化数据对比或展示，使用 Markdown 表格。
    * **图片:** 插入必要的图表（使用 `![替代文本](图片路径)`），并配合图号和图题说明。

**8. 图表引用 (Figure & Table Citation):**

* 所有插入的图表应有唯一的编号（例如，图1-1，表2-1）和清晰的标题。
* 在正文中引用图表时，使用其编号（例如，“结果如图1-1所示…”）。
* 图表下方应附有简要说明或注解。

**9. 一致性 (Consistency):**

* 整个项目的所有 Markdown 文档都应**严格遵循**此规范，包括术语使用、格式风格、结构层次等。

**执行:**

* 建议团队成员在编写代码的**同时**或**之后立即**编写/更新对应的 Markdown 文档。
* 将本文档规范作为团队代码/文档审查的标准之一。

